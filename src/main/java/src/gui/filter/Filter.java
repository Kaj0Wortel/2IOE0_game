
package src.gui.filter;


// own imports
import src.gui.ExtendableFrame;
import src.gui.RacingButton;
import src.gui.filter.Filter.FilterContents;
import src.gui.menuList.MenuItem;
import src.gui.menuList.SelectableItem;
import src.tools.observer.HashObservableInterface;
import src.tools.MultiTool.BoolEvaluator;


// Java imports
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;


/**
 * 
 * 
 * @author Kaj Wortel & Ger Wortel
 */
public abstract class Filter<Item extends MenuItem>
        extends ExtendableFrame<FilterContents>
        implements HashObservableInterface {
    final protected static int SPACING = 5;
    final protected static int CHECK_BOX_WIDTH = 20;
    final protected static int LABEL_WIDTH = 80;
    final protected static int COMP_WIDTH = 150;
    final protected static int GEN_HEIGHT = 30;
    
    
    /**
     * 
     * @param <C>
     * @param <Item> 
     */
    public static abstract class ItemPanel<C extends JComponent, Item>
            extends JPanel
            implements SelectableItem {
        
        final private JCheckBox checkBox;
        final private JLabel label;
        
        final protected C comp;
        
        
        /**
         * Constructor.
         * 
         * @param comp the user input selection component.
         * @param text the text of the label.
         */
        public ItemPanel(C comp, String text) {
            super(null);
            
            checkBox = new JCheckBox();
            checkBox.setSize(CHECK_BOX_WIDTH, GEN_HEIGHT);
            add(checkBox);
            
            label = new JLabel(text);
            label.setSize(LABEL_WIDTH, GEN_HEIGHT);
            add(label);
            
            this.comp = comp;        
            comp.setSize(COMP_WIDTH, GEN_HEIGHT);
            add(comp);
        }
        
        @Override
        public void setBounds(int x, int y, int width, int height) {
            super.setBounds(x, y, width, height);
            
            checkBox.setLocation(0, 0);
            label.setLocation(SPACING + checkBox.getWidth(), 0);
            comp.setLocation(2*SPACING + checkBox.getWidth()
                    + label.getWidth(), 0);
            
            checkBox.setSize(CHECK_BOX_WIDTH, height);
            label.setSize(LABEL_WIDTH, height);
            comp.setSize(width - comp.getX(), height);
        }
        
        @Override
        public boolean isSelected() {
            return checkBox.isSelected();
        }
        
        @Override
        public void setSelected(boolean selected) {
            checkBox.setSelected(selected);
        }
        
        /**
         * @return the filter for this item.
         *     {@code null} if the filter generated by this item should
         *     be ignored.
         */
        final public BoolEvaluator<Item> getFilter() {
            return isSelected()
                    ? null
                    : createFilter();
        }
        
        @Override
        public void setOpaque(boolean opaque) {
            super.setOpaque(opaque);
            
            for (Component component : getComponents()) {
                if (component instanceof JComponent)
                    ((JComponent) component).setOpaque(opaque);
            }
        }
        
        @Override
        public void setBackground(Color color) {
            super.setBackground(color);
            
            for (Component component : getComponents()) {
                if (component instanceof JComponent)
                    ((JComponent) component).setBackground(color);
            }
        }
        
        @Override
        public void setForeground(Color color) {
            super.setForeground(color);
            
            for (Component component : getComponents()) {
                if (component instanceof JComponent)
                    ((JComponent) component).setForeground(color);
            }
        }
        
        @Override
        public void setFont(Font font) {
            super.setFont(font);
            
            for (Component component : getComponents()) {
                if (component instanceof JComponent)
                    ((JComponent) component).setFont(font);
            }
        }
        
        /**
         * @return a fresh filter for this item.
         */
        public abstract BoolEvaluator<Item> createFilter();
        
        /**
         * Updates the panel after significant changes have occured.
         */
        public abstract void update();
        
        
    }
    
    
    /**
     * Contents class for the frame contents.
     */
    protected static class FilterContents<Item>
            extends JPanel {
        
        final private ItemPanel<?, Item>[] items;
        
        final private RacingButton generate;
        final private RacingButton cancel;
        
        protected FilterContents(ItemPanel<?, Item>[] items) {
            super(null);
            for (ItemPanel<?, Item> panel : this.items = items) {
                panel.setOpaque(isOpaque());
                panel.setBackground(getBackground());
                panel.setForeground(getForeground());
                panel.setFont(getFont());
                add(panel);
            }
            
            generate = new RacingButton("Filter");
            generate.setSize((SPACING + CHECK_BOX_WIDTH + LABEL_WIDTH
                    + COMP_WIDTH) / 2, GEN_HEIGHT);
            add(generate);
            
            cancel = new RacingButton("Cancel");
            cancel.setSize((SPACING + CHECK_BOX_WIDTH + LABEL_WIDTH
                    + COMP_WIDTH) / 2, GEN_HEIGHT);
            add(cancel);
        }
        
        @Override
        public void setBounds(int x, int y, int width, int height) {
            super.setBounds(x, y, width, height);
            
            int itemWidth = 2*SPACING + CHECK_BOX_WIDTH
                    + LABEL_WIDTH + COMP_WIDTH;
            
            for (int i = 0; i < items.length; i++) {
                ItemPanel<?, Item> item = items[i];
                item.setBounds(SPACING, SPACING + (SPACING + GEN_HEIGHT) * i,
                        itemWidth, GEN_HEIGHT);
            }
            
            int buttonHeight = SPACING + (GEN_HEIGHT + SPACING) * items.length;
            
            generate.setLocation(SPACING, buttonHeight);
            cancel.setLocation((itemWidth + 3*SPACING) / 2, buttonHeight);
        }
        
        @Override
        public void setOpaque(boolean opaque) {
            super.setOpaque(opaque);
            
            for (Component comp : getComponents()) {
                if (comp instanceof JComponent)
                    ((JComponent) comp).setOpaque(opaque);
            }
        }
        
        @Override
        public void setBackground(Color color) {
            super.setBackground(color);
            
            for (Component comp : getComponents()) {
                if (comp instanceof JComponent)
                    ((JComponent) comp).setBackground(color);
            }
        }
        
        @Override
        public void setForeground(Color color) {
            super.setForeground(color);
            
            for (Component comp : getComponents()) {
                if (comp instanceof JComponent)
                    ((JComponent) comp).setForeground(color);
            }
        }
        
        @Override
        public void setFont(Font font) {
            super.setFont(font);
            
            for (Component comp : getComponents()) {
                if (comp instanceof JComponent)
                    ((JComponent) comp).setFont(font);
            }
        }
        
        /**
         * @return an evaluator for all selected options. Always non-null.
         */
        protected BoolEvaluator<Item> createFilter() {
            final List<BoolEvaluator<Item>> evals = new ArrayList<>();
            
            for (ItemPanel<?, Item> panel : items) {
                final BoolEvaluator<Item> panelEval = panel.getFilter();
                if (panelEval != null) evals.add(panelEval);
            }
            
            return (Item item) -> {
                for (BoolEvaluator<Item> eval : evals) {
                    if (!eval.evaluate(item)) return false;
                }
                
                return true;
            };
        }
        
        /**
         * Updates the contents of the panel.
         */
        public void update() {
            for (ItemPanel<?, Item> panel : items) {
                panel.update();
            }
        }
        
        
    }
    
    
    /**
     * 
     * @param panels 
     * @param spacing 
     */
    protected Filter(ItemPanel<?, Item>[] panels) {
        this(panels, 0);
    }
    
    protected Filter(ItemPanel<?, Item>[] panels, int spacing) {
        super(new FilterContents(panels), "Filter options", spacing);
        SwingUtilities.invokeLater(() -> {
            updateContents();
        });
    }
    
    /**
     * @return the filter that should be applied on the menu lister.
     */
    public BoolEvaluator<Item> getFilter() {
        return comp.createFilter();
    }
    
    /**
     * Updates the contents if there was a significant change.
     */
    public void updateContents() {
        comp.update();
    }
    
    /**
     * @return the generate button.
     */
    public RacingButton getGenerateButton() {
        return comp.generate;
    }
    
    /**
     * @return the cancel button.
     */
    public RacingButton getCancelButton() {
        return comp.cancel;
    }
    
    
}
